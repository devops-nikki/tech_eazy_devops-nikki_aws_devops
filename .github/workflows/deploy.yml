name: Multi-Stage CI/CD with Workspace and Repo Modes

on:
  push:
    branches:
      - feature/assignment-4
    tags:
      - deploy-dev
      - deploy-prod

  workflow_dispatch:
    inputs:
      stage:
        description: "Select stage to deploy"
        required: true
        default: dev
        type: choice
        options:
          - dev
          - prod

env:
  AWS_REGION: ap-south-1
  TF_WORKING_DIR: ./ec2-deployement
  TF_VAR_shutdown_after_minutes: 30

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      SELECTED_STAGE: ${{ github.event.inputs.stage || (github.ref_name == 'deploy-prod' && 'prod') || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init & Workspace
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          terraform init
          terraform workspace select ${{ env.SELECTED_STAGE }} || terraform workspace new ${{ env.SELECTED_STAGE }}

      - name: Terraform Apply
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          if [ "${{ env.SELECTED_STAGE }}" == "prod" ]; then
            terraform apply -auto-approve \
              -var-file=prod.tfvars \
              -var="github_private_repo=https://github.com/${{ secrets.PRIVATE_REPO }}" \
              -var="github_token=${{secrets.PRIVATE_REPO_TOKEN}}" \
              -var="stage=prod"
          else
            terraform apply -auto-approve \
              -var-file=dev.tfvars \
              -var="github_repo_url=https://github.com/${{ secrets.PUBLIC_REPO }}" \
              -var="stage=dev"
          fi

      - name: Get EC2 Public IP 
        working-directory: ${{ env.TF_WORKING_DIR }}
        run: |
          echo "INSTANCE_IP=$(terraform output -raw app_ec2_public_ip)" >> $GITHUB_ENV
        

      - name: Wait for app_ready.txt
        run: |
          echo "Waiting for app_ready.txt in s3://${S3_BUCKET}/${{ env.SELECTED_STAGE }}/status/"
          for i in {1..30}; do
            if aws s3 ls s3://${S3_BUCKET}/${{ env.SELECTED_STAGE }}/status/app_ready.txt >/dev/null 2>&1; then
              echo "✅ app_ready.txt found on attempt $i"
              break
            else
              echo "Attempt $i: app_ready.txt not found... retrying in 10s"
              sleep 10
            fi
          done

      - name: Validate App Running
        run: |
          echo "Validating http://${INSTANCE_IP}"
          for i in {1..10}; do
            STATUS=$(curl -o /dev/null -s -w "%{http_code}" http://${INSTANCE_IP})
            if [[ "$STATUS" == "200" ]]; then
              echo "✅ App is healthy (HTTP 200)"
              exit 0
            else
              echo "Attempt $i: got HTTP $STATUS"
              sleep 10
            fi
          done
          echo "❌ App failed health check"
          exit 1